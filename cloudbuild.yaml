steps:
# 1. Build the Spring Boot application using Gradle
# Use a more recent Gradle image that includes JDK 17
- name: 'gradle:8.7-jdk17-jammy' # Or 'gradle:latest' or 'gradle:jdk17' if you prefer
  entrypoint: 'gradle'
  args: ['clean', 'build', '-x', 'test'] # 'clean build' generates the JAR. '-x test' skips tests for faster builds
  id: 'Build Spring Boot JAR'

# 2. Build the Docker image
# This step relies on your Dockerfile being in the root of the project
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/cloud-app-vale2025/cloud-app:latest', '.']
  id: 'Build Docker Image'

# 3. Push the Docker image to Google Artifact Registry (or Container Registry)
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/cloud-app-vale2025/cloud-app:latest']
  id: 'Push Image'

# 4. Deploy the Docker image to Google Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  args: ['gcloud', 'run', 'deploy', 'cloud-app-service', # Replace 'cloud-app-service' with your desired Cloud Run service name
         '--image', 'gcr.io/cloud-app-vale2025/cloud-app:latest',
         '--region', 'europe-west1', # IMPORTANT: Replace with your actual Cloud Run region (e.g., us-central1)
         '--platform', 'managed',
         '--allow-unauthenticated'] # Remove this flag if you want to secure your service
  id: 'Deploy to Cloud Run'

images:
  - 'gcr.io/cloud-app-vale2025/cloud-app:latest'

options:
  logging: CLOUD_LOGGING_ONLY

# Optional: only include this if you use a custom service account for deployments
# serviceAccount: projects/cloud-app-vale2025/serviceAccounts/YOUR_SA@cloud-app-vale2025.iam.gserviceaccount.com